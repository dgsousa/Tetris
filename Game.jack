class Game {
    field Board board;
    field Player player;
    
    constructor Game new() {
        let board = Board.new();
        let player = Player.new();
        do draw();
        return this;
    }

    method void draw() {
        do Drawer.drawShape(getShapeMap(), getPosition());
        return;
    }

    method void erase() {
        do Drawer.eraseShape(getShapeMap(), getPosition());
        return;
    }

    method void run() {
        var char key;
        var boolean exit;
        let exit = false;
        while (~exit) {
            while(key = 0) {
                let key = Keyboard.keyPressed();
            }
            if (key = 81) { let exit = true; } // q key
            if (key = 90)  { do rotate(); } // z key
            // if (key = 131) { do move(0, -1); } // up arrow
            if (key = 133) { do move(0, 1); }  // down arrow
            if (key = 130) { do move(-1, 0); } // left arrow
            if (key = 132) { do move(1, 0); }  // right arrow
            let key = 0;
        }
        return;
    }

    method void move(int x, int y) {
        var int newX, newY;
        var String shapeMap;
        var Array position;
        let shapeMap = getShapeMap();
        let position = getPosition();
        let newX = position[0] + x;
        let newY = position[1] + y;
        if(board.shapeIsInBounds(shapeMap, newX, newY)) {
            if (~(board.wouldOverlap(shapeMap, newX, newY))) { // prevents overlapping
                if(board.isInContactAbove(shapeMap, newX, newY)) {
                    do erase();
                    do board.addShapeToBoard(shapeMap, newX, newY);
                    do setNewShape();
                } else {
                    do erase();
                    do setPosition(newX, newY);
                    do draw();
                }
            }
        } else {
            do Output.printString("test");
            if(board.shapeIsAtFloor(shapeMap, newX, newY)) {
                do erase();
                do board.addShapeToBoard(shapeMap, newX, newY);
                do setNewShape();
            }
        }
        do Sys.wait(200);
        return;
    }

    method void rotate() {
        var String shapeMap;
        var Array position;
        var int newOrientation, orientation;
        let position = getPosition();
        let orientation = getOrientation();
        if(orientation = 3) {
            let newOrientation = 0;
        } else {
            let newOrientation = orientation + 1;
        }
        let shapeMap = getShapeMap();
        if(board.canRotate(shapeMap, position)) {
            do erase();
            do setOrientation(newOrientation);
            do draw();
            do Sys.wait(200);
        }
        return;
    }

    method String getShapeMap() {
        return player.getShapeMap(player.getOrientation());
    }

    method void setPosition(int newX, int newY) {
        do player.setPosition(newX, newY);
        return;
    }

    method Array getPosition() {
        return player.getPosition();
    }

    method int getOrientation() {
        return player.getOrientation();
    }

    method void setOrientation(int orientation) {
        do player.setOrientation(orientation);
        return;
    }

    method void setNewShape() {
        do player.setNewShape();
        return;
    }
}