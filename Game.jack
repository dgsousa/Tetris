class Game {
    field Board board;
    field Shape currentShape;
    field Array position, shapesArray;
    field int orientation, shapesIndex;
    
    constructor Game new(Array gameShapesArray) {
        let board = Board.new();
        let shapesIndex = 0;
        let shapesArray = gameShapesArray;
        do initializeShape();
        return this;
    }

    method void initializeShape() {
        let currentShape = Shape.new(shapesArray[shapesIndex]);
        do initializePosition(0, 0);
        do draw();
        let shapesIndex = shapesIndex + 1;
        return;
    }

    method void draw() {
        do Drawer.drawShape(currentShape.getShapeMap(), getCurrentPosition());
        return;
    }

    method void erase() {
        do Drawer.eraseShape(currentShape.getShapeMap(), getCurrentPosition());
        return;
    }

    method void run() {
        var char key;
        var boolean exit;
        let exit = false;
        while (~exit) {
            while(key = 0) {
                let key = Keyboard.keyPressed();
            }
            if (key = 81) { let exit = true; } // q key
            if (key = 90)  { do rotate(); } // z key
            // if (key = 131) { do move(0, -1); } // up arrow
            if (key = 133) { do move(0, 1); }  // down arrow
            if (key = 130) { do move(-1, 0); } // left arrow
            if (key = 132) { do move(1, 0); }  // right arrow
            let key = 0;
        }
        return;
    }

    method void move(int x, int y) {
        var int width, height, newX, newY;
        var String offsetString;
        var Array offset;
        let width = currentShape.getWidth();
        let height = currentShape.getHeight();
        let offset = currentShape.getOffset();
        let newX = position[0] + x;
        let newY = position[1] + y;
        if( // Checks to make sure the shape is in bounds
            (~((newY + modulo(offset, 10)) < 0)) & // below top
            (~((newY + height + modulo(offset, 10)) > 15)) & // above bottom
            (~((newX + (offset/10)) < 0)) & // left of right edge
            (~((newX + width + (offset/10)) > 32)) // right of left edge
        ) {
            if (~(board.wouldOverlap(currentShape.getShapeMap(), newX, newY))) { // prevents overlapping
                if(board.isInContactAbove(currentShape.getShapeMap(), newX, newY)) {
                    do erase();
                    do board.addShapeToBoard(currentShape.getShapeMap(), newX, newY);
                    do initializeShape();
                } else {
                    do erase();
                    do setCurrentPosition(newX, newY);
                    do draw();
                }
            }
        } else {
            if((newY + height + modulo(offset, 10)) = 16) {
                do erase();
                do board.addShapeToBoard(currentShape.getShapeMap(), newX, newY);
                do initializeShape();
            }
        }
        do Sys.wait(200);
        return;
    }

    method void initializePosition(int xPosition, int yPosition) {
        let position = Array.new(2);
        do setCurrentPosition(xPosition, yPosition);
        return;
    }

    method void setCurrentPosition(int xPosition, int yPosition) {
        let position[0] = xPosition;
        let position[1] = yPosition;
        return;
    }

    method Array getCurrentPosition() {
        return position;
    }

    method void rotate() {
        var String shapeMap;
        var int newOrientation, currentOrientation;
        if(orientation = 3) {
            let newOrientation = 0;
        } else {
            let newOrientation = orientation + 1;
        }
        let shapeMap = currentShape.getShapeMapByIndex(newOrientation);
        if(board.canRotate(shapeMap, position)) {
            do Output.printInt(newOrientation);
            do erase();
            do currentShape.setOrientation(newOrientation);
            do draw();
            do Sys.wait(200);
        }
        return;
    }

    method int modulo(int num, int base) {
        var int divisor, remainder;
        let divisor = (num/base);
        let remainder = num - (base * divisor);
        return remainder;
    }
}